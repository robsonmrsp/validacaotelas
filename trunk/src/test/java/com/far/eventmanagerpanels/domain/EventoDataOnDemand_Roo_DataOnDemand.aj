// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.far.eventmanagerpanels.domain;

import com.far.eventmanagerpanels.domain.Evento;
import com.far.eventmanagerpanels.domain.EventoDataOnDemand;
import com.far.eventmanagerpanels.domain.PainelDataOnDemand;
import com.far.eventmanagerpanels.domain.TipoEventoDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect EventoDataOnDemand_Roo_DataOnDemand {
    
    declare @type: EventoDataOnDemand: @Component;
    
    private Random EventoDataOnDemand.rnd = new SecureRandom();
    
    private List<Evento> EventoDataOnDemand.data;
    
    @Autowired
    private PainelDataOnDemand EventoDataOnDemand.painelDataOnDemand;
    
    @Autowired
    private TipoEventoDataOnDemand EventoDataOnDemand.tipoEventoDataOnDemand;
    
    public Evento EventoDataOnDemand.getNewTransientEvento(int index) {
        Evento obj = new Evento();
        setDataHoraFim(obj, index);
        setDataHoraInicio(obj, index);
        setDescricao(obj, index);
        setImagemLogo(obj, index);
        setImagemPlanoFundo(obj, index);
        setNome(obj, index);
        return obj;
    }
    
    public void EventoDataOnDemand.setDataHoraFim(Evento obj, int index) {
        Date dataHoraFim = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDataHoraFim(dataHoraFim);
    }
    
    public void EventoDataOnDemand.setDataHoraInicio(Evento obj, int index) {
        Date dataHoraInicio = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDataHoraInicio(dataHoraInicio);
    }
    
    public void EventoDataOnDemand.setDescricao(Evento obj, int index) {
        String descricao = "descricao_" + index;
        obj.setDescricao(descricao);
    }
    
    public void EventoDataOnDemand.setImagemLogo(Evento obj, int index) {
        String imagemLogo = "imagemLogo_" + index;
        obj.setImagemLogo(imagemLogo);
    }
    
    public void EventoDataOnDemand.setImagemPlanoFundo(Evento obj, int index) {
        String imagemPlanoFundo = "imagemPlanoFundo_" + index;
        obj.setImagemPlanoFundo(imagemPlanoFundo);
    }
    
    public void EventoDataOnDemand.setNome(Evento obj, int index) {
        String nome = "nome_" + index;
        obj.setNome(nome);
    }
    
    public Evento EventoDataOnDemand.getSpecificEvento(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Evento obj = data.get(index);
        Long id = obj.getId();
        return Evento.findEvento(id);
    }
    
    public Evento EventoDataOnDemand.getRandomEvento() {
        init();
        Evento obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Evento.findEvento(id);
    }
    
    public boolean EventoDataOnDemand.modifyEvento(Evento obj) {
        return false;
    }
    
    public void EventoDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Evento.findEventoEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Evento' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Evento>();
        for (int i = 0; i < 10; i++) {
            Evento obj = getNewTransientEvento(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
